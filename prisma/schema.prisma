generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @unique @default(uuid())
  displayName      String
  bio              String?
  email            String?
  phoneNumber      String?            @db.VarChar(10)
  password         String?
  photo            String?
  provider         provider_type      @default(web)
  createdAt        DateTime           @default(dbgenerated("NOW()"))
  cart             Cart?
  social           Social[]
  linked_account   linked_account?
  role             user_role          @default(user)
  onboardingStatus onboarding_status? @default(pending)
  address          Address?

  product         Product[]
  wishlist        wishlist[]
  reviews         Reviews[]
  recently_viewed recently_viewed[]
  Conversation    Conversation[]
  Chat            Chat[]
  followers       Followers[]       @relation("followers")
  following       Followers[]       @relation("following")
  cartId          String?

  order      Order[] @relation("order")
  salesOrder Order[] @relation("salesOrder")

  @@unique([email, provider])
}

model token {
  id        String   @id @unique @default(uuid())
  userId    String   @unique
  token     String
  expiresAt DateTime @db.Timestamptz()
}

model linked_account {
  id            String                @id @unique @default(uuid())
  status        linked_account_status @default(created)
  accountId     String
  stakeholderId String?
  productId     String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Followers {
  followingUser User   @relation("followers", fields: [followingUserId], references: [id])
  currentUser   User   @relation("following", fields: [userId], references: [id])
  id            String @id @unique @default(uuid())

  followingUserId String
  userId          String

  @@unique([followingUserId, userId])
}

model Social {
  url     String
  name    String
  User    User?  @relation(fields: [user_id], references: [id])
  user_id String

  id String @id @unique @default(uuid())

  @@unique([user_id, name])
}

model UserVerificationRecords {
  user_id String
  token   String
  id      Int    @id @default(autoincrement())
}

model Address {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(60)
  address   String
  city      String   @db.VarChar(40)
  state     String   @db.VarChar(20)
  pincode   String   @db.VarChar(6)
  mobile    String   @db.VarChar(10)
  userId    String   @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(dbgenerated("NOW()"))
}

//-----------------product schema-----------------//

model Product {
  name           String         @db.VarChar(50)
  desc           String
  price          Int
  discount       Int
  images         Json[]
  widthInInches  Int
  heightInInches Int
  sellingOption  selling_option
  rating         Int?
  id             String         @id @default(uuid())

  category    Category?    @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subject     Subject?     @relation(fields: [subject_id], references: [id])
  style       Style?       @relation(fields: [style_id], references: [id])
  material    Material?    @relation(fields: [material_id], references: [id])
  collections Collections? @relation(fields: [collections_id], references: [id])

  category_id    Int?
  subject_id     Int?
  style_id       Int?
  material_id    Int?
  collections_id Int?

  sales_person    User?             @relation(fields: [sales_person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_selles_person_id_fkey")
  sales_person_id String?
  reviews         Reviews[]
  cart_item       cart_item[]
  wishlist        wishlist[]
  recently_viewed recently_viewed[]
  inventory       Inventory?
  sales_order     sales_order[]

  createdAt  DateTime @default(dbgenerated("NOW()"))
  modifiedAt DateTime @updatedAt
}

model Category {
  name String @unique @db.VarChar(30)
  id   Int    @id @default(autoincrement())

  product Product[]
}

model Material {
  name String @unique @db.VarChar(20)
  id   Int    @id @default(autoincrement())

  product Product[]
}

model Subject {
  name String @unique @db.VarChar(30)
  id   Int    @id @default(autoincrement())

  product Product[]
}

model Style {
  name String @unique @db.VarChar(30)
  id   Int    @id @default(autoincrement())

  product Product[]
}

model Collections {
  name String @unique @db.VarChar(30)
  id   Int    @id @default(autoincrement())

  product Product[]
}

//****************product schema****************//

model Inventory {
  id           String @id @unique @default(uuid())
  availableQty Int
  reservedQty  Int    @default(0)

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reviews {
  createdAt  DateTime @default(dbgenerated("NOW()"))
  modifiedAt DateTime @updatedAt
  vote       Int      @default(1)
  review     Json
  id         String   @id @default(uuid())

  product_id String?
  user_id    String?
  product    Product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, product_id])
}

model wishlist {
  createdAt DateTime @default(dbgenerated("NOW()"))
  id        String   @id @default(uuid())

  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  User       User    @relation(fields: [user_id], references: [id])
  user_id    String
}

model recently_viewed {
  createdAt DateTime @default(dbgenerated("NOW()"))
  id        String   @id @default(uuid())

  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  User       User    @relation(fields: [user_id], references: [id])
  user_id    String
}

model Cart {
  id     String      @id @default(uuid())
  userId String      @unique
  items  cart_item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model cart_item {
  id         String  @id @default(uuid())
  cartId     String?
  product_id String
  quantity   Int

  Cart      Cart?    @relation(fields: [cartId], references: [id])
  product   Product? @relation(fields: [product_id], references: [id])
  createdAt DateTime @default(dbgenerated("NOW()"))
}

model Order {
  id      String        @id @default(uuid())
  status  order_status  @default(created)
  items   sales_order[]
  payment Payment?

  user          User?   @relation(name: "order", fields: [userId], references: [id])
  userId        String?
  salesPerson   User?   @relation(name: "salesOrder", fields: [salesPersonId], references: [id])
  salesPersonId String?

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(uuid())

  transfers Transfer[]
  
  order     Order      @relation(fields: [orderId], references: [id])
  orderId   String     @unique

  createdAt DateTime @default(now()) @db.Timestamptz()
}

model Transfer {
  id String @id @default(uuid())

  payment      Payment?     @relation(fields: [paymentId], references: [id])
  paymentId    String
  sales_order  sales_order? @relation(fields: [salesOrderId], references: [id])
  salesOrderId String       @unique

  createdAt DateTime @default(now()) @db.Timestamptz()
}

model sales_order {
  id                 String                 @id @default(uuid())
  quantity           Int
  price              Int
  discount           Int
  status             order_item_status_type @default(pending)
  cancellationReason String?

  Transfer  Transfer?
  product   Product?  @relation(fields: [productId], references: [id])
  productId String
  order     Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String

  createdAt DateTime @default(dbgenerated("NOW()"))
  updatedAt DateTime @updatedAt
}

// ---------------MESSENGER------------------------------------------------------

model Conversation {
  chat Chat[]
  user User   @relation(fields: [user_id], references: [id])

  id      String @id @default(uuid())
  user_id String
}

model Chat {
  message      String
  createdAt    DateTime      @default(dbgenerated("NOW()"))
  receiver     User          @relation(fields: [user_id], references: [id])
  Conversation Conversation? @relation(fields: [conversation_id], references: [id])
  id           String        @id @default(uuid())

  conversation_id String?
  user_id         String
}

enum sex_type {
  M
  F
}

enum selling_option {
  ORIGINAL
  PRINT
}

enum linked_account_status {
  created
  suspended
}

enum user_role {
  user
  seller
}

enum onboarding_status {
  pending
  success
}

enum provider_type {
  web
  google
  facebook
  twitter
}

enum order_status {
  created
  paid
}

enum order_item_status_type {
  pending
  shipped
  delivered
  cancelled
  refunded
}
