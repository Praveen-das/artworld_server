generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  displayName     String
  email           String?
  password        String?
  photo           String?
  provider        provider_type @default(web)
  default_address String?
  createdAt       DateTime      @default(dbgenerated("NOW()"))
  cart            cart_item[]
  social          Social[]
  // role            role          @default(user)
  id              String        @id @unique @default(uuid())

  address                                     Address[]
  product                                     Product[]
  wishlist                                    wishlist[]
  reviews                                     Reviews[]
  sales_order_personTosales_order_customer_id sales_order[]     @relation("personTosales_order_customer_id")
  sales_order_personTosales_order_seller_id   sales_order[]     @relation("personTosales_order_seller_id")
  recently_viewed                             recently_viewed[]
  Conversation                                Conversation[]
  Chat                                        Chat[]

  @@unique([email, provider])
}

model Social {
  url     String
  name    String
  User    User?  @relation(fields: [user_id], references: [id])
  user_id String

  id String @id @unique @default(uuid())

  @@unique([user_id, name])
}

model UserVerificationRecords {
  user_id String
  token   String
  id      Int    @id @default(autoincrement())
}

model Address {
  name            String   @db.VarChar(60)
  address         String
  city            String   @db.VarChar(40)
  state           String   @db.VarChar(20)
  pincode         Int
  email           String
  createdAt       DateTime @default(dbgenerated("NOW()"))
  mobile          Int
  alternate_phone Int?
  id              String   @id @default(uuid())

  user    User   @relation(fields: [user_id], references: [id])
  user_id String
}

model Product {
  name       String   @db.VarChar(50)
  desc       String
  quantity   Int
  price      Int
  discount   Int
  images     Json[]
  createdAt  DateTime @default(dbgenerated("NOW()"))
  modifiedAt DateTime @updatedAt
  size       Json[]
  rating     Int?
  id         String   @id @default(uuid())

  category_id     Int?
  material_id     Int?
  sales_person_id String?
  category        Category?         @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  material        Material?         @relation(fields: [material_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sales_person    User?             @relation(fields: [sales_person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_selles_person_id_fkey")
  reviews         Reviews[]
  cart_item       cart_item[]
  wishlist        wishlist[]
  recently_viewed recently_viewed[]

  @@unique([name, desc])
}

model Category {
  name    String    @unique @db.VarChar(30)
  id      Int       @id @default(autoincrement())
  product Product[]
}

model Material {
  name    String    @unique @db.VarChar(20)
  id      Int       @id @default(autoincrement())
  product Product[]
}

model Reviews {
  createdAt  DateTime @default(dbgenerated("NOW()"))
  modifiedAt DateTime @updatedAt
  vote       Int      @default(1)
  review     Json
  id         String   @id @default(uuid())

  product_id String?
  user_id    String?
  product    Product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, product_id])
}

model wishlist {
  createdAt DateTime @default(dbgenerated("NOW()"))
  id        String   @id @default(uuid())

  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  User       User    @relation(fields: [user_id], references: [id])
  user_id    String
}

model recently_viewed {
  createdAt DateTime @default(dbgenerated("NOW()"))
  id        String   @id @default(uuid())

  product    Product @relation(fields: [product_id], references: [id])
  product_id String
  User       User    @relation(fields: [user_id], references: [id])
  user_id    String
}

model cart_item {
  createdAt DateTime @default(dbgenerated("NOW()"))
  quantity  Int
  size      String
  price     Int
  discount  Int      @default(0)
  id        String   @id @default(uuid())

  product     Product?      @relation(fields: [product_id], references: [id])
  product_id  String
  User        User?         @relation(fields: [user_id], references: [id])
  user_id     String
  sales_order sales_order[]
}

model sales_order {
  timer_order_taken DateTime     @default(dbgenerated("NOW()"))
  status            status_type? @default(pending)
  payment_method    payment_type @default(card)
  id                String       @id @default(uuid())

  cart_item                              cart_item @relation(fields: [cart_item_id], references: [id])
  cart_item_id                           String
  person_personTosales_order_customer_id User      @relation("personTosales_order_customer_id", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer_id                            String
  person_personTosales_order_seller_id   User      @relation("personTosales_order_seller_id", fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seller_id                              String
}

// ---------------MESSENGER------------------------------------------------------

model Conversation {
  chat Chat[]
  user User   @relation(fields: [user_id], references: [id])

  id      String @id @default(uuid())
  user_id String
}

model Chat {
  message   String
  createdAt DateTime @default(dbgenerated("NOW()"))
  receiver  User     @relation(fields: [user_id], references: [id])

  id             String        @id @default(uuid())
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  user_id        String
}

enum sex_type {
  M
  F
}

// enum role {
//   admin
//   user
// }

enum payment_type {
  card
  cod
  net_banking
  upi
}

enum provider_type {
  web
  google
  facebook
  twitter
}

enum status_type {
  pending
  shipped
  completed
  declined
  refunded
  cancelled
}
