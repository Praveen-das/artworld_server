generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  displayName                                 String
  email                                       String?
  password                                    String?
  photo                                       String?
  provider                                    provider_type @default(web)
  id                                          String        @id @unique @default(uuid())
  address                                     Address[]
  product                                     Product[]
  reviews                                     Reviews[]
  sales_order_personTosales_order_customer_id sales_order[] @relation("personTosales_order_customer_id")
  sales_order_personTosales_order_seller_id   sales_order[] @relation("personTosales_order_seller_id")

  @@unique([email, provider])
}

model UserVerificationRecords {
  user_id String
  token   String
  id      Int    @id @default(autoincrement())
}

model Address {
  name            String  @db.VarChar(60)
  address         String
  city            String  @db.VarChar(40)
  state           String  @db.VarChar(20)
  pincode         Int
  email           String
  id              String  @id @default(uuid())
  isDefault       Boolean
  mobile          Int
  alternate_phone Int?
  user            User    @relation(fields: [user_id], references: [id])
  user_id         String
}

model Product {
  name            String     @db.VarChar(50)
  desc            String
  width           Int
  height          Int
  quantity        Int
  price           Int
  discount        Int
  images          Json[]
  defaultImage    String
  createdAt       DateTime   @default(now())
  modifiedAt      DateTime   @updatedAt
  id              String     @id @default(uuid())
  category_id     Int?
  material_id     Int?
  seles_person_id String?
  cart_itemId     Int?
  cart_item       cart_item? @relation(fields: [cart_itemId], references: [id])
  category        Category?  @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  material        Material?  @relation(fields: [material_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seles_person    User?      @relation(fields: [seles_person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_selles_person_id_fkey")
  reviews         Reviews[]

  @@unique([name, desc])
}

model Category {
  name    String    @unique @db.VarChar(30)
  id      Int       @id @default(autoincrement())
  product Product[]
}

model Material {
  name    String    @unique @db.VarChar(20)
  id      Int       @id @default(autoincrement())
  product Product[]
}

model Reviews {
  createdAt  DateTime @default(now())
  vote       Int      @db.SmallInt
  review     String
  id         Int      @id @default(autoincrement())
  product_id String?
  user_id    String?
  product    Product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       User?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, product_id])
}

model cart_item {
  quantity       Int
  discount       Int          @default(0)
  id             Int          @id @default(autoincrement())
  seles_order_id String?
  sales_order    sales_order? @relation(fields: [seles_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product        Product[]
}

model sales_order {
  timer_order_taken                      DateTime     @default(now())
  delivery_time                          DateTime     @db.Date
  status                                 status_type? @default(pending)
  id                                     String       @id @default(uuid())
  customer_id                            String?
  seller_id                              String?
  person_personTosales_order_customer_id User?        @relation("personTosales_order_customer_id", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person_personTosales_order_seller_id   User?        @relation("personTosales_order_seller_id", fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cart_item                              cart_item[]
}

enum sex_type {
  M
  F
}

enum provider_type {
  web
  google
  facebook
  twitter
}

enum status_type {
  pending
  processing
  delivered
  cancelled
}
