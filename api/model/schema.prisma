generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// tables///////////////////////////////////////////////////////////////////////

model User {
  displayName String
  email       String?
  password    String?
  photo       String?
  provider    provider_type @default(web)
  id          String        @id @unique @default(uuid())

  address                                     Address[]
  product                                     Product[]
  reviews                                     Reviews[]
  sales_order_personTosales_order_customer_id sales_order[] @relation("personTosales_order_customer_id")
  sales_order_personTosales_order_seller_id   sales_order[] @relation("personTosales_order_seller_id")

  @@unique([email, provider])
}

model UserVerificationRecords {
  user_id String
  token   String
  id      Int    @id @default(autoincrement())
}

model Address {
  name            String  @db.VarChar(60)
  address         String
  city            String  @db.VarChar(40)
  state           String  @db.VarChar(20)
  pincode         Int
  mobile          String  @db.VarChar(20)
  alternate_phone String? @db.VarChar(20)
  email           String
  id              String  @id @default(uuid())

  user_id String
  user    User   @relation(fields: [user_id], references: [id])
}

model Product {
  name         String   @db.VarChar(50)
  desc         String
  width        Int
  height       Int
  quantity     Int
  price        Int
  discount     Int
  images       Json[]
  defaultImage String
  createdAt    DateTime @default(now())
  modifiedAt   DateTime @updatedAt
  id           String   @id @default(uuid())

  category        Category?  @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  category_id     Int?
  material        Material?  @relation(fields: [material_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  material_id     Int?
  seles_person    User?      @relation(fields: [seles_person_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "product_selles_person_id_fkey")
  seles_person_id String?
  reviews         Reviews[]
  cart_item       cart_item? @relation(fields: [cart_itemId], references: [id])
  cart_itemId     Int?

  @@unique([name, desc])
}

model Category {
  name    String    @unique @db.VarChar(30)
  id      Int       @id @default(autoincrement())
  product Product[]
}

model Material {
  name    String    @unique @db.VarChar(20)
  id      Int       @id @default(autoincrement())
  product Product[]
}

model Reviews {
  createdAt DateTime @default(now())
  vote      Int      @db.SmallInt
  review    String
  id        Int      @id @default(autoincrement())

  product    Product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_id String?
  user       User?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_id    String?

  @@unique([user_id, product_id])
}

model cart_item {
  quantity Int
  discount Int @default(0)
  id       Int @id @default(autoincrement())

  product        Product[]
  sales_order    sales_order? @relation(fields: [seles_order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seles_order_id String?
}

model sales_order {
  timer_order_taken DateTime     @default(now())
  delivery_time     DateTime     @db.Date
  // purchase_order_number BigInt
  status            status_type? @default(pending)
  id                String       @id @default(uuid())

  person_personTosales_order_customer_id User?       @relation("personTosales_order_customer_id", fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customer_id                            String?
  person_personTosales_order_seller_id   User?       @relation("personTosales_order_seller_id", fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  seller_id                              String?
  cart_item                              cart_item[]
}

enum sex_type {
  M
  F
}

enum provider_type {
  web
  google
  facebook
  twitter
}

enum status_type {
  pending
  processing
  delivered
  cancelled
}
